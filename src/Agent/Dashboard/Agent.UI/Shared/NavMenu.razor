@using Agent.UI.Application.Abstractions.Interfaces
@using Agent.UI.Application.Abstractions.Models
@using Agent.UI.Application.Services
@using Agent.UI.Application.Services.Models
@using Agent.UI.Domain.Models

@inject IServiceLogic Service;
<aside id="layout-menu" class="layout-menu menu-vertical menu bg-menu-theme">
    <div class="app-brand demo">
        <a href="/" class="app-brand-link">
            <span class="app-brand-logo demo">

            </span>
            <span class="app-brand-text demo menu-text fw-bolder ms-2">NVM</span>
        </a>

        <a href="javascript:void(0);" class="layout-menu-toggle menu-link text-large ms-auto d-block d-xl-none">
            <i class="bx bx-chevron-left bx-sm align-middle"></i>
        </a>
    </div>

    <div class="menu-inner-shadow"></div>

    <ul class="menu-inner py-1">
        <!-- Dashboard -->
        <li class="menu-item active">
            <a href="/" class="menu-link">
                <i class="menu-icon tf-icons bx bx-home-circle"></i>
                <div data-i18n="Analytics">Dashboard</div>
            </a>
        </li>

        <li class="menu-header small text-uppercase">
            <span class="menu-header-text">Services</span>
        </li>
        @foreach (var service in _services.OrderBy(s => s.Order))
        {
            <li class="menu-item">
                <a href="@service.Key" class="menu-link">
                    <i class="menu-icon tf-icons bx bx-home-circle"></i>
                    <div data-i18n="Analytics">@service.Name</div>
                </a>
            </li>
        }
    </ul>
</aside>

@code {

    private List<AvailableServiceResponse> _services = new();

    protected override async Task OnInitializedAsync()
    {
        await RefreshMenu();
    }

    public async Task RefreshMenu()
    {
        var servicesResponse = await Service.GetAvailable();
        if (servicesResponse.IsFailure)
        {
            return;
        }

        _services.Clear();
        _services.AddRange(servicesResponse.Value!);
        await InvokeAsync(StateHasChanged);
    }


}