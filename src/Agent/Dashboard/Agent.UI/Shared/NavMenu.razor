@using Agent.UI.Application.Abstractions.Interfaces
@using Agent.UI.Application.Abstractions.Models
@using Agent.UI.Application.Services
@using Agent.UI.Application.Services.Models
@using Agent.UI.Domain.Models

@inject IServiceLogic Service;

<div class="app-brand demo">
    <a href="/" class="app-brand-link">
        <span class="app-brand-logo demo">

        </span>
        <span class="app-brand-text demo menu-text fw-bolder ms-2">NVM</span>
    </a>

    <a href="javascript:void(0);" class="layout-menu-toggle menu-link text-large ms-auto d-block d-xl-none">
        <i class="bx bx-chevron-left bx-sm align-middle"></i>
    </a>
</div>

<div class="menu-inner-shadow"></div>

<ul class="menu-inner py-1">
    <!-- Dashboard -->
    <li class="menu-item active">
        <a href="/" class="menu-link">
            <i class="menu-icon tf-icons bx bx-home-circle"></i>
            <div data-i18n="Analytics">Dashboard</div>
        </a>
    </li>

    <li class="menu-header small text-uppercase">
        <span class="menu-header-text">Services</span>
    </li>
    @foreach (var service in _services.OrderBy(s => s.Order))
    {
        <li class="menu-item">
            <a href="@service.Key" class="menu-link">
                <i class="menu-icon tf-icons bx bx-home-circle"></i>
                <div data-i18n="Analytics">@service.Name</div>
            </a>
        </li>

        @*
                
        <!-- Layouts -->
            <li class="menu-item">
              <a href="javascript:void(0);" class="menu-link menu-toggle">
                <i class="menu-icon tf-icons bx bx-layout"></i>
                <div data-i18n="Layouts">Layouts</div>
              </a>

              <ul class="menu-sub">
                <li class="menu-item">
                  <a href="layouts-without-menu.html" class="menu-link">
                    <div data-i18n="Without menu">Without menu</div>
                  </a>
                </li>
                <li class="menu-item">
                  <a href="layouts-without-navbar.html" class="menu-link">
                    <div data-i18n="Without navbar">Without navbar</div>
                  </a>
                </li>
                <li class="menu-item">
                  <a href="layouts-container.html" class="menu-link">
                    <div data-i18n="Container">Container</div>
                  </a>
                </li>
                <li class="menu-item">
                  <a href="layouts-fluid.html" class="menu-link">
                    <div data-i18n="Fluid">Fluid</div>
                  </a>
                </li>
                <li class="menu-item">
                  <a href="layouts-blank.html" class="menu-link">
                    <div data-i18n="Blank">Blank</div>
                  </a>
                </li>
              </ul>
            </li>        
        *@
    }

</ul>

@code {

    private List<AvailableServiceResponse> _services = new();

    protected override async Task OnInitializedAsync()
    {
        await RefreshMenu();
    }

    public async Task RefreshMenu()
    {
        var servicesResponse = await Service.GetAvailable();
        if (servicesResponse.IsFailure)
        {
            return;
        }

        _services.Clear();
        _services.AddRange(servicesResponse.Value!);
        await InvokeAsync(StateHasChanged);
    }


}