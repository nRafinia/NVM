@using Agent.UI.Application.Abstractions.Interfaces
@using Agent.UI.Application.Abstractions.Models
@using Agent.UI.Domain.Models

@inject IService Service;

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">Agent.UI</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </div>
        
        @foreach (var service in _services??new List<ServiceInformation>(0))
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="@service.Key" Match="NavLinkMatch.All">
                    <span class="oi oi-home" aria-hidden="true"></span> @service.Name
                </NavLink>
            </div>
        }
    </nav>
</div>

@code {
    private bool _collapseNavMenu = true;

    private string? NavMenuCssClass => _collapseNavMenu ? "collapse" : null;
    private IList<ServiceInformation>? _services;

    protected override async Task OnInitializedAsync()
    {
        await RefreshMenu();
    }

    public async Task RefreshMenu()
    {
        var servicesResponse = await Service.GetAvailable();
        if (servicesResponse.IsFailure)
        {
            return;
        }

        _services = servicesResponse.Value!;
        await InvokeAsync(StateHasChanged);
    }

    private void ToggleNavMenu()
    {
        _collapseNavMenu = !_collapseNavMenu;
    }


}