@using Agent.UI.Models.Components.Toasts
@using System.Timers

@inject IJSRuntime JsRuntime

<div class="bs-toast toast fade toast-placement-ex m-2 @_showingClass @(_showingType?.ShowingType) @_placement" role="alert" aria-live="assertive" aria-atomic="true">
    <div class="toast-header">
        <i class="bx bx-bell me-2"></i>
        <div class="me-auto fw-semibold">@_title</div>
        <small>@_note</small>
        <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close" @onclick="CloseToast"></button>
    </div>
    <div class="toast-body">@_text</div>
</div>

@code {
    private string _showingClass = "hide";

    private string? _title;
    private string? _note;
    private string? _text;
    private ToastType? _showingType;
    private ToastPlacement? _placement;
    private int _delay;

    private Timer? _timer;

    public void Show(string? title, string? note, string? text, ToastType showingType, ToastPlacement placement, int delay = 5000)
    {
        _title = title;
        _note = note;
        _text = text;
        _showingType = showingType;
        _placement = placement;
        _delay = delay;

        _showingClass = "show";
        StateHasChanged();

        CreateTimer(delay);
    }

    private void CloseToast()
    {
        DisposeTimer();
        ClearToastData();
        InvokeAsync(StateHasChanged);
    }

    private void ClearToastData()
    {
        _showingClass = "hide";
        _title = null;
        _note = null;
        _text = null;
        _showingType = null;
        _placement = null;
        _delay = 5000;
    }

    private void CreateTimer(int delay)
    {
        _timer = new Timer(delay);
        _timer.Elapsed += TimerEvent;
        _timer.AutoReset = true;
        _timer.Enabled = true;
    }

    private void DisposeTimer()
    {
        if (_timer is null)
        {
            return;
        }

        _timer.Enabled = false;
        _timer.Stop();
        _timer.Dispose();
        _timer = null;
    }

    private void TimerEvent(object? sender, ElapsedEventArgs e)
    {
        DisposeTimer();
        ClearToastData();
        InvokeAsync(StateHasChanged);
    }

}