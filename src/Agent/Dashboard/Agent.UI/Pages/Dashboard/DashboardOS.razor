@using Agent.UI.Application.Abstractions.Models.HardwareInfo
@using Agent.UI.Application.HardwareInfo

<div class="card">
    <div class="card-body">
        <table class="table table-striped table-borderless border-bottom">
            <tbody>
            <tr>
                <td class="text-nowrap">OS</td>
                <td>@(_hardwareInformation?.Name) (@(_hardwareInformation?.Version))</td>
            </tr>

            <tr>
                <td class="text-nowrap">Type</td>
                <td>@(_hardwareInformation?.Type)</td>
            </tr>

            <tr>
                <td class="text-nowrap">Is x64 OS</td>
                <td >
                    <input class="form-check-input" type="checkbox" disabled="disabled" checked="@(_hardwareInformation?.Isx64.ToString().ToLower())">
                </td>
            </tr>

            <tr>
                <td class="text-nowrap">Is x64 processors</td>
                <td >
                    <input class="form-check-input" type="checkbox" disabled="disabled" checked="@(_hardwareInformation?.Isx64Processor.ToString().ToLower())">
                </td>
            </tr>

            <tr>
                <td class="text-nowrap">Username</td>
                <td class="text-nowrap">@(_hardwareInformation?.UserName)</td>
            </tr>

            @if ((_hardwareInformation?.Type ?? OperationSystemType.Other) == OperationSystemType.Windows)
            {
                <tr>
                    <td class="text-nowrap"></td>
                    <td></td>
                </tr>
            }
            </tbody>
        </table>
    </div>
</div>

@code {
    private OperationSystemInformation? _hardwareInformation;


    [Parameter]
    public IHardwareInformationLogic HardwareInformation { get; set; }
    
    public async Task GetOsInformation()
    {
        var getOsResponse = await HardwareInformation.GetOs();
        if (getOsResponse.IsFailure)
        {
            return;
        }

        _hardwareInformation = getOsResponse.Value!;
        await InvokeAsync(StateHasChanged);
    }
    
}