@using Agent.UI.Application.Abstractions.Models.HardwareInfo
@using Agent.UI.Application.HardwareInfo

<div class="card">
    <div class="card-body">
        <table class="table table-striped table-borderless">
            <tbody>
            <tr>
                <td class="text-nowrap">OS</td>
                <td>@(_information?.Name) (@(_information?.Version))</td>
            </tr>

            <tr>
                <td class="text-nowrap">Type</td>
                <td>@(_information?.Type)</td>
            </tr>

            <tr>
                <td class="text-nowrap">Is x64 OS</td>
                <td >
                    <input class="form-check-input" type="checkbox" disabled="disabled" checked="@(_information?.Isx64.ToString().ToLower())">
                </td>
            </tr>

            <tr>
                <td class="text-nowrap">Is x64 processors</td>
                <td >
                    <input class="form-check-input" type="checkbox" disabled="disabled" checked="@(_information?.Isx64Processor.ToString().ToLower())">
                </td>
            </tr>

            <tr>
                <td class="text-nowrap">Username</td>
                <td class="text-nowrap">@(_information?.UserName)</td>
            </tr>

            @if ((_information?.Type ?? OperationSystemType.Other) == OperationSystemType.Windows)
            {
                <tr>
                    <td class="text-nowrap">Logical drives</td>
                    <td>
                        @(string.Join(", ",_information?.LogicalDrives?? new List<string>(0)))
                    </td>
                </tr>
            }
            </tbody>
        </table>
    </div>
</div>

@code {
    private OperationSystemInformation? _information;
    
    [Parameter]
    public EventCallback GettingFinishedCallback { get; set; }
    
    public async Task GetInformation(IHardwareInformationLogic hardwareInformation)
    {
        var getInformationResponse = await hardwareInformation.GetOs();
        if (getInformationResponse.IsFailure)
        {
            return;
        }

        _information = getInformationResponse.Value!;
        await InvokeAsync(StateHasChanged);
        await GettingFinishedCallback.InvokeAsync();
    }

    public string? GetMachineName => _information?.MachineName;

}