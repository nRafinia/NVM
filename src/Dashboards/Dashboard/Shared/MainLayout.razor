@using Dashboard.Domain.Entities
@using System.Security.Claims
@inherits LayoutComponentBase

@inject NavigationManager NavigationManager
@inject DashboardAuthentication Authenticator
@inject IJSRuntime JsRuntime

<PageTitle>Dashboard</PageTitle>

@*<AuthorizeView Context="Account">
                <NotAuthorized>
                    <a href="/Login"></a>
                </NotAuthorized>
                <Authorized>
                    <label>@_currentUserGivenName</label>
                    <button type="button" class="btn btn-primary" @onclick="TryLogout">Logout</button>
                </Authorized>
            </AuthorizeView>*@

<CascadingValue Value="this">
    <div class="layout-wrapper layout-content-navbar">
        <div class="layout-container">
            <NavMenu/>

            <div class="layout-page">
                <NavBar/>

                <div class="content-wrapper">
                    <div class="container-xxl flex-grow-1 container-p-y">
                        <div class="row">
                            @Body
                        </div>
                    </div>

                    <FooterPage/>
                    <div class="content-backdrop fade"></div>
                </div>
            </div>
        </div>

        @*-- Overlay --*@
        <div class="layout-overlay layout-menu-toggle"></div>
    </div>
</CascadingValue>

@code{

    [CascadingParameter] 
    protected Task<AuthenticationState> AuthStat { get; set; }

    private string _currentUserGivenName = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var user = (await AuthStat).User;
        if (!(user.Identity?.IsAuthenticated ?? false))
        {
            NavigationManager.NavigateTo($"/login?returnUrl={Uri.EscapeDataString(NavigationManager.Uri)}");
        }

        _currentUserGivenName = user.FindFirst(ClaimTypes.GivenName)?.Value ?? string.Empty;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JsRuntime.InvokeVoidAsync("AfterLoadPage");
    }

    private async Task TryLogout()
    {
        await Authenticator.LogoutAsync();
        NavigationManager.NavigateTo("/login", true);
    }

}