@using SharedKernel.Entities
@using Dashboard.Application.Credentials.Queries.GetAllCredentials
@using SharedKernel.Enums

@inject IMediator Mediator
@inject SweetAlertService Swal;

<Dialog title="Select credential" @ref="_selectCredential">
    <Body>
    <div class="col-12">

        <div class="demo-inline-spacing mt-3">
            <div class="list-group">
                @foreach (var credential in _credentials)
                {
                    <a href="javascript:void(0);" @onclick="()=>Select(credential)" class="list-group-item list-group-item-action d-flex justify-content-between align-items-center">
                        @credential.Name
                        <small class="text-light fw-semibold">@credential.Description</small>
                        <span class="badge @(GetCredentialLabelType(credential.CredentialType)) rounded-pill">
                            @credential.CredentialType
                        </span>
                    </a>
                }
            </div>
        </div>
    </div>
    </Body>
    <Footer>
        <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="Close">Close</button>
    </Footer>
</Dialog>

@code {
    [Parameter] public EventCallback<Credential> OnSelect { get; set; }

    private Dialog? _selectCredential;
    private List<Credential> _credentials = new(0);

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await LoadData();
    }

    public void Show()
    {
        _selectCredential?.Open();
    }

    private async Task LoadData()
    {
        var credentialsResponse = await Mediator.Send(new GetAllCredentialQuery());
        if (credentialsResponse.IsFailure)
        {
            await Swal.FireAsync("Error", credentialsResponse.Error!.Message, SweetAlertIcon.Error);
            return;
        }

        _credentials = credentialsResponse.Value!.ToList();
        StateHasChanged();
    }

    private void Select(Credential credential)
    {
        OnSelect.InvokeAsync(credential);
        Close();
    }

    private void Close()
    {
        _selectCredential?.Close();
    }

    private static string GetCredentialLabelType(CredentialType type)
    {
        return type switch
        {
            CredentialType.None => "bg-primary",
            CredentialType.Basic => "bg-info",
            _ => "bg-dark"
        };
    }

}