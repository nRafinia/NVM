@using Dashboard.Components
@using Dashboard.Components.Models

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">Dashboard</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu">

    <div>
        <TreeView TValue="MailItem" DataSource="@MyFolder" Id="Id" Text="FolderName" ParentId="ParentId"
                  Expanded="Expanded" HasChildren="HasSubFolder">
        </TreeView>
    </div>

    <div>
        <TreeViewList Items="_items2"/>
    </div>

    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="counter">
                <span class="oi oi-plus" aria-hidden="true"></span> Counter
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="fetchdata">
                <span class="oi oi-list-rich" aria-hidden="true"></span> Fetch data
            </NavLink>
        </div>
    </nav>
</div>

@code {
    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }


    protected class MailItem
    {
        public int Id { get; set; }
        public string ParentId { get; set; }
        public bool HasSubFolder { get; set; }
        public string FolderName { get; set; }
        public bool Expanded { get; set; }
    }

    protected class TestClass
    {
        public string Alaki { get; set; }
    }

    List<MailItem> MyFolder = new List<MailItem>();

    List<TreeItemData<TestClass>>? _items2;

    protected override Task OnInitializedAsync()
    {
        MyFolder.Add(new MailItem { Id = 1, FolderName = "Inbox", HasSubFolder = true, Expanded = true, ParentId = "" });
        MyFolder.Add(new MailItem { Id = 2, FolderName = "Category", ParentId = "1", HasSubFolder = true, Expanded = true });
        MyFolder.Add(new MailItem { Id = 3, FolderName = "Primary", ParentId = "2", HasSubFolder = false, Expanded = true });
        MyFolder.Add(new MailItem { Id = 6, FolderName = "Demo", ParentId = "2", HasSubFolder = true, Expanded = true });
        MyFolder.Add(new MailItem { Id = 4, FolderName = "Social", ParentId = "6", HasSubFolder = false, Expanded = true });
        MyFolder.Add(new MailItem { Id = 5, FolderName = "Promotion", ParentId = "6", HasSubFolder = true, Expanded = true });


        var root = new TreeItemData<TestClass>("0", "Root", null, true);
        var item1 = new TreeItemData<TestClass>("1", "Inbox", null, true);
        var item2 = new TreeItemData<TestClass>("2", "Category", null, true);
        var item3 = new TreeItemData<TestClass>("3", "Primary", null);
        var item4 = new TreeItemData<TestClass>("4", "Demo", null, true);
        var item5 = new TreeItemData<TestClass>("5", "Social", null);
        var item6 = new TreeItemData<TestClass>("6", "Promotion", null, true);
        var item7 = new TreeItemData<TestClass>("7", "Alaki", null);

        var item21 = new TreeItemData<TestClass>("21", "Inbox2", null);
        var item22 = new TreeItemData<TestClass>("22", "Category 2", null);

        root.AddChild(item1);
        root.AddChild(item21);

        item1.AddChild(item2);
        item2.AddChild(item3, item4);
        item4.AddChild(item5, item6);
        item6.AddChild(item7);

        item21.AddChild(item22);

        _items2 = new List<TreeItemData<TestClass>>()
        {
            root
        };

        return base.OnInitializedAsync();
    }


}