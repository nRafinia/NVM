@typeparam T
@inherits OrderedListBase<T>

<OrderedList Collapsed="Collapsed" Class="@Class">
    @foreach (var item in SortBy?.Invoke(Parental??new List<T>(0))??new List<T>(0))
    {
        var subItems = FilterBy?.Invoke(Remaining?.Where(i => GetParent?.Invoke(i)?.Equals(item) == true)??new List<T>(0))?.ToList();
        <ListItem @key="item" Context="childCollapsed" Item="item" Level="Level" HasChildren="subItems?.Any()??false">
            @if (subItems?.Any()??false)
            {
                <OrderedListByGetParent Level="Level + 1"
                                        Collapsed="childCollapsed"
                                        Parental="subItems" Remaining="Remaining.Where(i => GetParent(i)?.Equals(item) != true).ToList()" GetParent="GetParent" />
            }
        </ListItem>
    }
</OrderedList>
@code {
    [Parameter] 
    public List<T>? Parental { get; set; }
    [Parameter] 
    public List<T>? Remaining { get; set; }
    [Parameter] 
    public Func<T, T>? GetParent { get; set; }
}
