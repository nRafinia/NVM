@typeparam T
@inherits OrderedListBase<T>

<OrderedList Collapsed="Collapsed" Class="@Class">
    @foreach (var item in SortBy?.Invoke(Parental??new List<T>(0))??new List<T>(0))
    {
        <ListItem @key="item" Context="childCollapsed" Item="item" Level="Level" HasChildren="TreeView?.HasChildren?.Invoke(item)??false">
            @{
                var subItems = GetChildren?.Invoke(item);
                subItems = subItems == null ? null : FilterBy?.Invoke(subItems??new List<T>(0))?.ToList();
                if (subItems != null)
                {
                    if (!(TreeView?.IsLazyLoading??true) || !childCollapsed)
                    {
                        <OrderedListByGetChildren Level="Level + 1"
                                                  Collapsed="childCollapsed"
                                                  Parental="subItems" GetChildren="GetChildren" />
                    }
                }
            }
        </ListItem>
    }
</OrderedList>

@code {
    [Parameter] 
    public List<T>? Parental { get; set; }
    
    [Parameter] 
    public Func<T, List<T>?>? GetChildren { get; set; }
}
