@page "/Login"

@using Dashboard.Extensions
@attribute [AllowAnonymous]

@inject DashboardAuthentication WebsiteAuthenticator
@inject NavigationManager NavigationManager

<EditForm Model="LoginFormModel">
    <div>
        <label>
            Username:
            <InputText @bind-Value="LoginFormModel.UserName"></InputText>
        </label>
    </div>
    <div>
        <label>
            Password:
            <InputText type="password" @bind-Value="LoginFormModel.Password"></InputText>
        </label>
    </div>
    <div>
        <button @onclick="TryLogin">Submit</button>
    </div>
</EditForm>

@code {
    [CascadingParameter]
    protected Task<AuthenticationState> AuthStat { get; set; }
    
    private LoginFormModel LoginFormModel { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var user = (await AuthStat).User;
        if ((user.Identity?.IsAuthenticated ?? false))
        {
            NavigationManager.NavigateTo("/");
        }
    }
    
    private async Task TryLogin()
    {
        var loginIsOk = await WebsiteAuthenticator.LoginAsync(LoginFormModel);
        if (!loginIsOk)
        {
            return;
        }
        
        var returnUrl = NavigationManager.TryGetQueryString("returnUrl", out var returnPath)
            ? returnPath.ToString()
            : "/";
        NavigationManager.NavigateTo(returnUrl,true);
    }

}