@using Dashboard.Application.Users.Commands.SetPassword
@using SharedKernel.ValueObjects

@inject IMediator Mediator
@inject SweetAlertService Swal;

<Dialog title="Set password" @ref="_setPassword">
    <Body>
    <div class="form-group mb-3">
        <label for="txt-set-password">New password <span class="required">*</span></label>
        <div class="input-group input-group-merge">
            <Password @bind-Value="_password" Class="form-control" Id="txt-set-password"/>
        </div>
        <small class="text-light fw-semibold">
            Password must contain at least one uppercase letter, one lowercase letter, and be at least 6 characters long.
        </small>
    </div>
    </Body>
    <Footer>
        <button type="button" class="btn btn-primary" data-dismiss="modal" @onclick="Set">Set</button>
        <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="Close">Close</button>
    </Footer>
</Dialog>

@code {
    private Dialog? _setPassword;

    private string _password = string.Empty;
    private IdColumn _userId = IdColumn.None;

    public void Show(IdColumn userId)
    {
        _password = string.Empty;
        _userId = userId;
        _setPassword?.Open();
    }

    private void Close()
    {
        _setPassword?.Close();
    }

    private async Task Set()
    {
        if (!IsValidForm())
        {
            await Swal.FireAsync("Error", "Invalid form data", SweetAlertIcon.Error);
            return;
        }

        var setPasswordResponse = await Mediator.Send(new SetPasswordCommand(_userId, _password));
        if (setPasswordResponse.IsFailure)
        {
            await Swal.FireAsync("Error", setPasswordResponse.Error!.Message, SweetAlertIcon.Error);
        }
        else
        {
            await Swal.FireAsync("Success", "The new password is set.", SweetAlertIcon.Success);
        }

        Close();
    }

    private bool IsValidForm()
    {
        return !string.IsNullOrWhiteSpace(_password);
    }


}