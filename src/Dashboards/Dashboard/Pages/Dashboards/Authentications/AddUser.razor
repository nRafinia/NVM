@using Dashboard.Application.Credentials.Commands.CommitCredentialsChanges
@using Dashboard.Application.LDAPs.Commands.AddLDAP
@using Dashboard.Application.Users.Commands.AddUser
@using SharedKernel.Entities

@inject IMediator Mediator
@inject SweetAlertService Swal;

<Dialog title="Add User" @ref="_addUser">
    <Body>
    <div class="form-group mb-3">
        <label for="txt-add-userName">UserName <span class="required">*</span></label>
        <input type="text" class="form-control" id="txt-add-userName" @bind="_userName" placeholder="username"/>
    </div>

    <div class="form-group mb-3">
        <label for="txt-add-password">Password <span class="required">*</span></label>
        <input type="password" class="form-control" id="txt-add-password" @bind="_password" placeholder=""/>
        <small class="text-light fw-semibold">
            Password must contain at least one uppercase letter, one lowercase letter, and be at least 6 characters long.
        </small>
    </div>

    <div class="form-group mb-3">
        <label for="txt-add-display-name">Display Name <span class="required">*</span></label>
        <input type="text" class="form-control" id="txt-add-display-name" @bind="_displayName"/>
    </div>

    </Body>
    <Footer>
        <button type="button" class="btn btn-primary" data-dismiss="modal" @onclick="Add">Add</button>
        <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="Close">Close</button>
    </Footer>
</Dialog>

@code {
    [Parameter] public EventCallback OnAdd { get; set; }

    private Dialog? _addUser;

    private string _userName = string.Empty;
    private string _password = string.Empty;
    private string _displayName = string.Empty;

    public void Show()
    {
        _userName = string.Empty;
        _password = string.Empty;
        _displayName = string.Empty;
        _addUser?.Open();
    }

    private void Close()
    {
        _addUser?.Close();
    }

    private async Task Add()
    {
        if (!IsValidForm())
        {
            await Swal.FireAsync("Error", "Invalid form data", SweetAlertIcon.Error);
            return;
        }

        var addUserResponse = await Mediator.Send(new AddUserCommand(
            _userName,
            _password,
            _displayName
        ));

        if (addUserResponse.IsFailure)
        {
            await Swal.FireAsync("Error", addUserResponse.Error!.Message, SweetAlertIcon.Error);
            return;
        }

        Close();

        await OnAdd.InvokeAsync();
    }

    private bool IsValidForm()
    {
        return !string.IsNullOrWhiteSpace(_userName) &&
               !string.IsNullOrWhiteSpace(_password) &&
               !string.IsNullOrWhiteSpace(_displayName);
    }

}