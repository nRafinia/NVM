@using MediatR
@using Dashboard.Application.Credentials.Queries.GetAllCredentials
@using Dashboard.Domain.Entities
@using Dashboard.Domain.ValueObjects
@using Dashboard.Application.Credentials.Commands.DeleteCredentials
@using Dashboard.Domain.Enums
@using Dashboard.Application.Credentials.Commands.CommitCredentialsChanges

@inherits DashboardPage
@{ base.BuildRenderTree(__builder); }

@inject IMediator Mediator
@inject SweetAlertService Swal;

<SectionContent SectionName="ToolbarSection">
    <ul class="navbar-nav me-auto mb-2 mb-lg-0">

        <li class="nav-item dropdown">
            <a
                class="nav-link dropdown-toggle"
                href="javascript:void(0)"
                id="navbarDropdown"
                role="button"
                data-bs-toggle="dropdown"
                aria-expanded="false">
                <img src="img/icons/certificate-24.png" alt="certificate"/>
                Add
            </a>
            <ul class="dropdown-menu" aria-labelledby="navbarDropdown">
                <li>
                    <a class="dropdown-item" href="javascript:void(0);" @onclick="() => _addNoneCertificateDialog?.Show()">
                        None
                    </a>
                </li>
                <li>
                    <a class="dropdown-item" href="javascript:void(0)" @onclick="() => _addBasicCertificateDialog?.Show()">
                        Basic
                    </a>
                </li>
            </ul>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="javascript:void(0)" @onclick="LoadData">
                <img src="img/icons/refresh-24.png" alt="Refresh"/>
                Refresh
            </a>
        </li>
    </ul>
</SectionContent>

<table class="table table-striped">
    <thead>
    <tr>
        <th>Name</th>
        <th>Type</th>
        <th>Description</th>
        <th>Actions</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var credential in _credentials)
    {
        <tr @key="credential">
            <td>
                <strong>@credential.Name</strong>
            </td>
            <td>
                <span class="badge @GetCertificateLabelType(credential.CredentialType) me-1">@credential.CredentialType</span>
            </td>
            <td>@credential.Description</td>
            <td>
                <div class="dropdown">
                    <button type="button" class="btn p-0 dropdown-toggle hide-arrow" data-bs-toggle="dropdown">
                        <i class="bx bx-dots-vertical-rounded"></i>
                    </button>
                    <div class="dropdown-menu">
                        <a class="dropdown-item" href="javascript:void(0);" @onclick="() => Update(credential)">
                            <i class="bx bx-edit-alt me-1"></i> Edit
                        </a>
                        <a class="dropdown-item" href="javascript:void(0);" @onclick="() => Delete(credential.Id)">
                            <i class="bx bx-trash me-1"></i> Delete
                        </a>
                    </div>
                </div>
            </td>
        </tr>
    }
    </tbody>
</table>

<AddNoneCertificate @ref="_addNoneCertificateDialog" OnAdd="@LoadData"></AddNoneCertificate>
<UpdateNoneCertificate @ref="_updateNoneCertificateDialog" OnUpdate="@LoadData"></UpdateNoneCertificate>

<AddBasicCertificate @ref="_addBasicCertificateDialog" OnAdd="@LoadData"></AddBasicCertificate>
<UpdateBasicCertificate @ref="_updateBasicCertificateDialog" OnUpdate="@LoadData"></UpdateBasicCertificate>

@code {
    private List<Credential> _credentials = new(0);
    private AddNoneCertificate? _addNoneCertificateDialog;
    private AddBasicCertificate? _addBasicCertificateDialog;
    private UpdateNoneCertificate? _updateNoneCertificateDialog;
    private UpdateBasicCertificate? _updateBasicCertificateDialog;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await LoadData();
    }

    private async Task LoadData()
    {
        var credentialsResponse = await Mediator.Send(new GetAllCredentialQuery());
        if (credentialsResponse.IsFailure)
        {
            await Swal.FireAsync("Error", credentialsResponse.Error!.Message, SweetAlertIcon.Error);
            return;
        }

        _credentials = credentialsResponse.Value!.ToList();
    }

    private async Task Delete(IdColumn id)
    {
        var credential = _credentials.FirstOrDefault(x => x.Id == id);
        if (credential is null)
        {
            return;
        }

        var deleteConfirmation = await Swal.FireAsync(new SweetAlertOptions("Delete")
        {
            Text = $"Are you sure for delete '{credential.Name}' credential?",
            Icon = SweetAlertIcon.Warning,
            ShowCancelButton = true,
            ConfirmButtonText = "Yes, delete it!",
            CancelButtonText = "No, keep it"
        });

        if (deleteConfirmation.IsDismissed)
        {
            return;
        }

        var deleteResponse = await Mediator.Send(new DeleteCredentialCommand(id));
        if (deleteResponse.IsFailure)
        {
            await Swal.FireAsync("Error", deleteResponse.Error!.Message, SweetAlertIcon.Error);
            return;
        }

        await Mediator.Send(new CommitCredentialChanges());

        await LoadData();
    }

    private void Update(Credential credential)
    {
        switch (credential.CredentialType)
        {
            case CredentialType.None:
                _updateNoneCertificateDialog?.Show(credential);
                break;
            case CredentialType.Basic:
                _updateBasicCertificateDialog?.Show(credential);
                break;
        }
    }

    private string GetCertificateLabelType(CredentialType type)
    {
        return type switch
        {
            CredentialType.None => "bg-label-primary",
            CredentialType.Basic => "bg-label-info",
            _ => "bg-label-dark"
        };
    }

}