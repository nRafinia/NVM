@using Dashboard.Application.Credentials.Commands.CommitCredentialsChanges
@using Dashboard.Application.Credentials.Commands.UpdateCredentials.UpdateCredentialsBasic
@using Dashboard.Domain.Entities
@using Dashboard.Domain.ValueObjects
@using SharedKernel.Entities
@using SharedKernel.Enums

@inject IMediator Mediator
@inject SweetAlertService Swal;

<Dialog title="Update Basic certificate" @ref="_updateCertificate">
    <Body>
    <div class="form-group">
        <label for="txt-update-basic-name">Name <span class="required">*</span></label>
        <input type="text" class="form-control" id="txt-update-basic-name" @bind="_name" placeholder="certificate name"/>
    </div>

    <div class="form-group">
        <label for="txt-update-basic-user-name">User name <span class="required">*</span></label>
        <input type="text" class="form-control" id="txt-update-basic-user-name" @bind="_userName" placeholder="user name"/>
    </div>

    <div class="form-group">
        <label for="txt-update-basic-password">Password <span class="required">*</span></label>
        <input type="password" class="form-control" id="txt-update-basic-password" @bind="_password" placeholder="password"/>
    </div>

    <div class="form-group">
        <label for="txt-update-basic-description">Description</label>
        <input type="text" class="form-control" id="txt-update-basic-description" @bind="_description" placeholder="(optional)"/>
    </div>
    </Body>
    <Footer>
        <button type="button" class="btn btn-primary" data-dismiss="modal" @onclick="Update">Update</button>
        <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="Close">Close</button>
    </Footer>
</Dialog>

@code {
    [Parameter] public EventCallback OnUpdate { get; set; }

    private Dialog? _updateCertificate;

    private IdColumn _id = IdColumn.None;
    private string _name = string.Empty;
    private string _userName = string.Empty;
    private string _password = string.Empty;
    private string? _description = string.Empty;

    public void Show(Credential credential)
    {
        if (credential.CredentialType != CredentialType.Basic)
        {
            return;
        }

        _id = credential.Id;
        _name = credential.Name;
        _userName = credential.BasicCredential!.UserName;
        _password = credential.BasicCredential!.Password;
        _description = credential.Description;
        _updateCertificate?.Open();
    }

    private void Close()
    {
        _updateCertificate?.Close();
    }

    private async Task Update()
    {
        if (!IsValidForm())
        {
            await Swal.FireAsync("Error", "Invalid form data", SweetAlertIcon.Error);
            return;
        }

        var updateCertificateResponse = await Mediator.Send(new UpdateCredentialBasic(_id, _name, _userName, _password, _description));
        if (updateCertificateResponse.IsFailure)
        {
            await Swal.FireAsync("Error", updateCertificateResponse.Error!.Message, SweetAlertIcon.Error);
            return;
        }

        await Mediator.Send(new CommitCredentialChanges());

        Close();

        await OnUpdate.InvokeAsync();
    }

    private bool IsValidForm()
    {
        return _id != IdColumn.None &&
               !string.IsNullOrWhiteSpace(_name) &&
               !string.IsNullOrWhiteSpace(_userName) &&
               !string.IsNullOrWhiteSpace(_password);
    }


}