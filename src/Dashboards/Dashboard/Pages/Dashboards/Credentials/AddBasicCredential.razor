@using Dashboard.Application.Credentials.Commands.AddCredentials.AddCredentialsBasic
@using Dashboard.Application.Credentials.Commands.CommitCredentialsChanges

@inject IMediator Mediator
@inject SweetAlertService Swal;

<Dialog title="Add Basic credential" @ref="_addCredential">
    <Body>
    <div class="form-group">
        <label for="txt-add-basic-name">Name <span class="required">*</span></label>
        <input type="text" class="form-control" id="txt-add-basic-name" @bind="_name" placeholder="credential name"/>
    </div>

    <div class="form-group">
        <label for="txt-add-basic-user-name">User name <span class="required">*</span></label>
        <input type="text" class="form-control" id="txt-add-basic-user-name" @bind="_userName" placeholder="user name"/>
    </div>
    
    <div class="form-group">
        <label for="txt-add-basic-password">Password <span class="required">*</span></label>
        <input type="password" class="form-control" id="txt-add-basic-password" @bind="_password" placeholder="password"/>
    </div>
    
    <div class="form-group">
        <label for="txt-add-basic-description">Description</label>
        <input type="text" class="form-control" id="txt-add-basic-description" @bind="_description" placeholder="(optional)"/>
    </div>
    </Body>
    <Footer>
        <button type="button" class="btn btn-primary" data-dismiss="modal" @onclick="Add">Add</button>
        <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="Close">Close</button>
    </Footer>
</Dialog>

@code {
    [Parameter]
    public EventCallback OnAdd { get; set; }
    
    private Dialog? _addCredential;

    private string _name = string.Empty;
    private string _userName = string.Empty;
    private string _password = string.Empty;
    private string? _description = string.Empty;

    public void Show()
    {
        _name = string.Empty;
        _userName = string.Empty;
        _password = string.Empty;
        _description = default;
        _addCredential?.Open();
    }

    private void Close()
    {
        _addCredential?.Close();
    }

    private async Task Add()
    {
        if (!IsValidForm())
        {
            await Swal.FireAsync("Error", "Invalid form data", SweetAlertIcon.Error);
            return;
        }

        var addCredentialResponse = await Mediator.Send(new AddCredentialBasic(_name, _userName,_password, _description));

        if (addCredentialResponse.IsFailure)
        {
            await Swal.FireAsync("Error", addCredentialResponse.Error!.Message, SweetAlertIcon.Error);
            return;
        }

        await Mediator.Send(new CommitCredentialChanges());
        
        Close();

        await OnAdd.InvokeAsync();
    }

    private bool IsValidForm()
    {
        return !string.IsNullOrWhiteSpace(_name) &&
               !string.IsNullOrWhiteSpace(_userName) &&
               !string.IsNullOrWhiteSpace(_password);
    }


}